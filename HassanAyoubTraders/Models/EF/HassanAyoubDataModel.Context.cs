//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HassanAyoubTraders.Models.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HassanAyoubDBEntities : DbContext
    {
        public HassanAyoubDBEntities()
            : base("name=HassanAyoubDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankToBankTransfer> BankToBankTransfers { get; set; }
        public virtual DbSet<ChartofAccount> ChartofAccounts { get; set; }
        public virtual DbSet<ChartOfAccountType> ChartOfAccountTypes { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CityArea> CityAreas { get; set; }
        public virtual DbSet<Code> Codes { get; set; }
        public virtual DbSet<CompanyInformation> CompanyInformations { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EntryType> EntryTypes { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentHeader> PaymentHeaders { get; set; }
        public virtual DbSet<ProfitAndLoss> ProfitAndLosses { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderLine> PurchaseOrderLines { get; set; }
        public virtual DbSet<PurchaseOrderReturn> PurchaseOrderReturns { get; set; }
        public virtual DbSet<PurchaseOrderReturnLine> PurchaseOrderReturnLines { get; set; }
        public virtual DbSet<SaleOrder> SaleOrders { get; set; }
        public virtual DbSet<SaleOrderLine> SaleOrderLines { get; set; }
        public virtual DbSet<SaleOrderReturn> SaleOrderReturns { get; set; }
        public virtual DbSet<SaleOrderReturnLine> SaleOrderReturnLines { get; set; }
        public virtual DbSet<StatesByCountryID> StatesByCountryIDs { get; set; }
        public virtual DbSet<SubItem> SubItems { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UnitType> UnitTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<vv_ProfitLossExpanse> vv_ProfitLossExpanse { get; set; }
        public virtual DbSet<vv_ProfitLossGrossProfit> vv_ProfitLossGrossProfit { get; set; }
        public virtual DbSet<vv_ProfitLossPurchase> vv_ProfitLossPurchase { get; set; }
        public virtual DbSet<vv_ProfitLossSale> vv_ProfitLossSale { get; set; }
        public virtual DbSet<vw_AccountTransactions> vw_AccountTransactions { get; set; }
        public virtual DbSet<vw_BankTransactions> vw_BankTransactions { get; set; }
        public virtual DbSet<vw_CashTransactions> vw_CashTransactions { get; set; }
        public virtual DbSet<vw_DailyCashTransactions> vw_DailyCashTransactions { get; set; }
        public virtual DbSet<vw_DetailLedgerStatement> vw_DetailLedgerStatement { get; set; }
        public virtual DbSet<vw_GetAvailableStockBySubItem> vw_GetAvailableStockBySubItem { get; set; }
        public virtual DbSet<vw_GetCustomerAllTableInfo> vw_GetCustomerAllTableInfo { get; set; }
        public virtual DbSet<vw_GetPOReReturnItemForInventory> vw_GetPOReReturnItemForInventory { get; set; }
        public virtual DbSet<vw_GetSalesItemForInventory> vw_GetSalesItemForInventory { get; set; }
        public virtual DbSet<vw_GetSOReReturnItemForInventory> vw_GetSOReReturnItemForInventory { get; set; }
        public virtual DbSet<vw_InvertoryOnHandAllTypes> vw_InvertoryOnHandAllTypes { get; set; }
        public virtual DbSet<vw_PaymentDetailForHeader> vw_PaymentDetailForHeader { get; set; }
        public virtual DbSet<vw_PaymentHeader> vw_PaymentHeader { get; set; }
        public virtual DbSet<vw_Payments> vw_Payments { get; set; }
        public virtual DbSet<vw_PurchaseDetailForHeader> vw_PurchaseDetailForHeader { get; set; }
        public virtual DbSet<vw_PurchaseOrder> vw_PurchaseOrder { get; set; }
        public virtual DbSet<vw_PurchaseOrderReturn> vw_PurchaseOrderReturn { get; set; }
        public virtual DbSet<vw_PurchaseReturnDetailForHeader> vw_PurchaseReturnDetailForHeader { get; set; }
        public virtual DbSet<vw_SaleOrder> vw_SaleOrder { get; set; }
        public virtual DbSet<vw_SaleOrderReturn> vw_SaleOrderReturn { get; set; }
        public virtual DbSet<vw_SalesDetailForHeader> vw_SalesDetailForHeader { get; set; }
        public virtual DbSet<vw_SalesReturnDetailForHeader> vw_SalesReturnDetailForHeader { get; set; }
        public virtual DbSet<vw_TotalPaidAmountByOrderNo> vw_TotalPaidAmountByOrderNo { get; set; }
        public virtual DbSet<vw_Transactions> vw_Transactions { get; set; }
    
        public virtual int AddUpdateBankTransferTrans(Nullable<int> bankTransferID, Nullable<System.DateTime> transferDate, string action, Nullable<decimal> amount, Nullable<decimal> serviceCharges)
        {
            var bankTransferIDParameter = bankTransferID.HasValue ?
                new ObjectParameter("BankTransferID", bankTransferID) :
                new ObjectParameter("BankTransferID", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var serviceChargesParameter = serviceCharges.HasValue ?
                new ObjectParameter("ServiceCharges", serviceCharges) :
                new ObjectParameter("ServiceCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateBankTransferTrans", bankTransferIDParameter, transferDateParameter, actionParameter, amountParameter, serviceChargesParameter);
        }
    
        public virtual int AddUpdatePurchaseOrderReturnTransactions(Nullable<int> purchaseOrderReturnID, Nullable<System.DateTime> orderDate, string action)
        {
            var purchaseOrderReturnIDParameter = purchaseOrderReturnID.HasValue ?
                new ObjectParameter("PurchaseOrderReturnID", purchaseOrderReturnID) :
                new ObjectParameter("PurchaseOrderReturnID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdatePurchaseOrderReturnTransactions", purchaseOrderReturnIDParameter, orderDateParameter, actionParameter);
        }
    
        public virtual int AddUpdatePurchaseOrderTransactions(Nullable<int> purchaseOrderID, Nullable<System.DateTime> orderDate, string action)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdatePurchaseOrderTransactions", purchaseOrderIDParameter, orderDateParameter, actionParameter);
        }
    
        public virtual int AddUpdatePurchasePaymentTransactions(Nullable<int> paymentID, Nullable<System.DateTime> orderDate, string action)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdatePurchasePaymentTransactions", paymentIDParameter, orderDateParameter, actionParameter);
        }
    
        public virtual int AddUpdateSaleOrderReturnTransactions(Nullable<int> saleOrderReturnID, Nullable<System.DateTime> orderDate, string action)
        {
            var saleOrderReturnIDParameter = saleOrderReturnID.HasValue ?
                new ObjectParameter("SaleOrderReturnID", saleOrderReturnID) :
                new ObjectParameter("SaleOrderReturnID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateSaleOrderReturnTransactions", saleOrderReturnIDParameter, orderDateParameter, actionParameter);
        }
    
        public virtual int AddUpdateSaleOrderTransactions(Nullable<int> saleOrderID, Nullable<System.DateTime> orderDate, string action)
        {
            var saleOrderIDParameter = saleOrderID.HasValue ?
                new ObjectParameter("SaleOrderID", saleOrderID) :
                new ObjectParameter("SaleOrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateSaleOrderTransactions", saleOrderIDParameter, orderDateParameter, actionParameter);
        }
    
        public virtual ObjectResult<BrowseAccount_Result> BrowseAccount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAccount_Result>("BrowseAccount");
        }
    
        public virtual ObjectResult<BrowseAccountByID_Result> BrowseAccountByID(Nullable<int> accountID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAccountByID_Result>("BrowseAccountByID", accountIDParameter);
        }
    
        public virtual int BrowseAccountLedger(Nullable<int> accountID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BrowseAccountLedger", accountIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseAccountLedger_New_Result> BrowseAccountLedger_New(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> accountID, string roleID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAccountLedger_New_Result>("BrowseAccountLedger_New", startDateParameter, endDateParameter, accountIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<BrowseAccountPayableReport_Result> BrowseAccountPayableReport(Nullable<System.DateTime> startDate, string userRole)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAccountPayableReport_Result>("BrowseAccountPayableReport", startDateParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<BrowseAccountRecievableReport_Result> BrowseAccountRecievableReport(Nullable<System.DateTime> startDate, string userRole)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAccountRecievableReport_Result>("BrowseAccountRecievableReport", startDateParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<BrowseAllCityArea_Result> BrowseAllCityArea()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAllCityArea_Result>("BrowseAllCityArea");
        }
    
        public virtual ObjectResult<BrowseAllCompanies_Result> BrowseAllCompanies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAllCompanies_Result>("BrowseAllCompanies");
        }
    
        public virtual ObjectResult<BrowseAllEmployees_Result> BrowseAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAllEmployees_Result>("BrowseAllEmployees");
        }
    
        public virtual ObjectResult<BrowseAllItmes_Result> BrowseAllItmes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAllItmes_Result>("BrowseAllItmes");
        }
    
        public virtual ObjectResult<BrowseAllSubItems_Result> BrowseAllSubItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseAllSubItems_Result>("BrowseAllSubItems");
        }
    
        public virtual ObjectResult<BrowseBankAccount_Result> BrowseBankAccount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseBankAccount_Result>("BrowseBankAccount");
        }
    
        public virtual ObjectResult<BrowseBankTransfers_Result> BrowseBankTransfers(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseBankTransfers_Result>("BrowseBankTransfers", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseCodesByType_Result> BrowseCodesByType(string codeType)
        {
            var codeTypeParameter = codeType != null ?
                new ObjectParameter("CodeType", codeType) :
                new ObjectParameter("CodeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseCodesByType_Result>("BrowseCodesByType", codeTypeParameter);
        }
    
        public virtual ObjectResult<BrowseCustomerWiseBalanceReport_Result> BrowseCustomerWiseBalanceReport(Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<int> salesOfficerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseCustomerWiseBalanceReport_Result>("BrowseCustomerWiseBalanceReport", cityIDParameter, cityAreaIDParameter, salesOfficerIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseDetailLedgerStatement_Result> BrowseDetailLedgerStatement(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> accountID, string roleID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseDetailLedgerStatement_Result>("BrowseDetailLedgerStatement", startDateParameter, endDateParameter, accountIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<BrowseEditPOLine_Result> BrowseEditPOLine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseEditPOLine_Result>("BrowseEditPOLine");
        }
    
        public virtual ObjectResult<BrowseEditPOReturnLine_Result> BrowseEditPOReturnLine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseEditPOReturnLine_Result>("BrowseEditPOReturnLine");
        }
    
        public virtual ObjectResult<BrowseExceutionReport_Result> BrowseExceutionReport(Nullable<bool> isSale, Nullable<int> vendorID, Nullable<int> customerID, Nullable<int> salesOfficerID, Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseExceutionReport_Result>("BrowseExceutionReport", isSaleParameter, vendorIDParameter, customerIDParameter, salesOfficerIDParameter, cityIDParameter, cityAreaIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseExceutionReport_New_Result> BrowseExceutionReport_New(Nullable<bool> isSale, Nullable<int> vendorID, Nullable<int> customerID, Nullable<int> salesOfficerID, Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseExceutionReport_New_Result>("BrowseExceutionReport_New", isSaleParameter, vendorIDParameter, customerIDParameter, salesOfficerIDParameter, cityIDParameter, cityAreaIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseExpenses_Result> BrowseExpenses(string paymentType, Nullable<int> accountId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseExpenses_Result>("BrowseExpenses", paymentTypeParameter, accountIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseItemActivityReport_Result> BrowseItemActivityReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> subItemID, string userRole)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var subItemIDParameter = subItemID.HasValue ?
                new ObjectParameter("SubItemID", subItemID) :
                new ObjectParameter("SubItemID", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseItemActivityReport_Result>("BrowseItemActivityReport", startDateParameter, endDateParameter, subItemIDParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> BrowseNewNumber(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("BrowseNewNumber", typeParameter);
        }
    
        public virtual ObjectResult<BrowsePaymentHeader_Result> BrowsePaymentHeader(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePaymentHeader_Result>("BrowsePaymentHeader", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowsePayments_Result> BrowsePayments(string paymentType, Nullable<int> accountId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePayments_Result>("BrowsePayments", paymentTypeParameter, accountIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowsePODetailBPOID_Result> BrowsePODetailBPOID(Nullable<int> pOID)
        {
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePODetailBPOID_Result>("BrowsePODetailBPOID", pOIDParameter);
        }
    
        public virtual ObjectResult<BrowsePurchaseOrderReturn_Result> BrowsePurchaseOrderReturn(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePurchaseOrderReturn_Result>("BrowsePurchaseOrderReturn", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowsePurchaseOrders_Result> BrowsePurchaseOrders(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowsePurchaseOrders_Result>("BrowsePurchaseOrders", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseSaleOrders_Result> BrowseSaleOrders(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSaleOrders_Result>("BrowseSaleOrders", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseSaleOrdersReturn_Result> BrowseSaleOrdersReturn(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSaleOrdersReturn_Result>("BrowseSaleOrdersReturn", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseSalesInvoiceSummary_Result> BrowseSalesInvoiceSummary(Nullable<int> salesOfficerID, Nullable<int> customerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSalesInvoiceSummary_Result>("BrowseSalesInvoiceSummary", salesOfficerIDParameter, customerIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseSalesReport_Result> BrowseSalesReport(Nullable<int> vendorID, Nullable<int> itemID, Nullable<int> salesOfficerID, Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSalesReport_Result>("BrowseSalesReport", vendorIDParameter, itemIDParameter, salesOfficerIDParameter, cityIDParameter, cityAreaIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<BrowseSODetailBSOID_Result> BrowseSODetailBSOID(Nullable<int> sOID)
        {
            var sOIDParameter = sOID.HasValue ?
                new ObjectParameter("SOID", sOID) :
                new ObjectParameter("SOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSODetailBSOID_Result>("BrowseSODetailBSOID", sOIDParameter);
        }
    
        public virtual ObjectResult<BrowseSOReturnDetailBSOID_Result> BrowseSOReturnDetailBSOID(Nullable<int> sOReturnID)
        {
            var sOReturnIDParameter = sOReturnID.HasValue ?
                new ObjectParameter("SOReturnID", sOReturnID) :
                new ObjectParameter("SOReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrowseSOReturnDetailBSOID_Result>("BrowseSOReturnDetailBSOID", sOReturnIDParameter);
        }
    
        public virtual int DeleteBankTransfer(Nullable<int> bankTransferID)
        {
            var bankTransferIDParameter = bankTransferID.HasValue ?
                new ObjectParameter("BankTransferID", bankTransferID) :
                new ObjectParameter("BankTransferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBankTransfer", bankTransferIDParameter);
        }
    
        public virtual int DeleteCashPaymentEntry(Nullable<int> recordID, string recordType)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var recordTypeParameter = recordType != null ?
                new ObjectParameter("RecordType", recordType) :
                new ObjectParameter("RecordType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCashPaymentEntry", recordIDParameter, recordTypeParameter);
        }
    
        public virtual int DeleteExpense(Nullable<int> expenseID)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("ExpenseID", expenseID) :
                new ObjectParameter("ExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExpense", expenseIDParameter);
        }
    
        public virtual int DeletePayment(Nullable<int> paymentId)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("paymentId", paymentId) :
                new ObjectParameter("paymentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePayment", paymentIdParameter);
        }
    
        public virtual int DeletePaymentTransaction(string paymentType, Nullable<int> paymentID)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentTransaction", paymentTypeParameter, paymentIDParameter);
        }
    
        public virtual ObjectResult<string> DeletePOLine(Nullable<int> pOLineID, Nullable<int> pOID)
        {
            var pOLineIDParameter = pOLineID.HasValue ?
                new ObjectParameter("POLineID", pOLineID) :
                new ObjectParameter("POLineID", typeof(int));
    
            var pOIDParameter = pOID.HasValue ?
                new ObjectParameter("POID", pOID) :
                new ObjectParameter("POID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeletePOLine", pOLineIDParameter, pOIDParameter);
        }
    
        public virtual ObjectResult<string> DeletePOReturnLine(Nullable<int> pOReturnLineID, Nullable<int> pOReturnID)
        {
            var pOReturnLineIDParameter = pOReturnLineID.HasValue ?
                new ObjectParameter("POReturnLineID", pOReturnLineID) :
                new ObjectParameter("POReturnLineID", typeof(int));
    
            var pOReturnIDParameter = pOReturnID.HasValue ?
                new ObjectParameter("POReturnID", pOReturnID) :
                new ObjectParameter("POReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeletePOReturnLine", pOReturnLineIDParameter, pOReturnIDParameter);
        }
    
        public virtual int DeletePurchaseOrder(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrder", orderIDParameter);
        }
    
        public virtual int DeletePurchaseOrderReturn(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrderReturn", orderIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteSaleOrderLine(Nullable<int> saleOrderLineID, Nullable<int> saleOrderID)
        {
            var saleOrderLineIDParameter = saleOrderLineID.HasValue ?
                new ObjectParameter("SaleOrderLineID", saleOrderLineID) :
                new ObjectParameter("SaleOrderLineID", typeof(int));
    
            var saleOrderIDParameter = saleOrderID.HasValue ?
                new ObjectParameter("SaleOrderID", saleOrderID) :
                new ObjectParameter("SaleOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteSaleOrderLine", saleOrderLineIDParameter, saleOrderIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteSaleOrderReturnLine(Nullable<int> saleOrderReturnLineID, Nullable<int> saleOrderReturnID)
        {
            var saleOrderReturnLineIDParameter = saleOrderReturnLineID.HasValue ?
                new ObjectParameter("SaleOrderReturnLineID", saleOrderReturnLineID) :
                new ObjectParameter("SaleOrderReturnLineID", typeof(int));
    
            var saleOrderReturnIDParameter = saleOrderReturnID.HasValue ?
                new ObjectParameter("SaleOrderReturnID", saleOrderReturnID) :
                new ObjectParameter("SaleOrderReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteSaleOrderReturnLine", saleOrderReturnLineIDParameter, saleOrderReturnIDParameter);
        }
    
        public virtual int DeleteSalesOrder(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesOrder", orderIDParameter);
        }
    
        public virtual int DeleteSalesOrderReturn(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesOrderReturn", orderIDParameter);
        }
    
        public virtual int DeleteSinglePaymentTransaction(string paymentType, Nullable<int> paymentID)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSinglePaymentTransaction", paymentTypeParameter, paymentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAccountDueAmountByIDandEndDate(Nullable<int> accountID, Nullable<System.DateTime> endDate)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAccountDueAmountByIDandEndDate", accountIDParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAccountPayableForCompanyPosition_Result> GetAccountPayableForCompanyPosition(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userRole)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountPayableForCompanyPosition_Result>("GetAccountPayableForCompanyPosition", startDateParameter, endDateParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<GetAccountRecievableForCompanyPosition_Result> GetAccountRecievableForCompanyPosition(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string userRole)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountRecievableForCompanyPosition_Result>("GetAccountRecievableForCompanyPosition", startDateParameter, endDateParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<GetBankLedger_Result> GetBankLedger(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> bankID, string roleID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankLedger_Result>("GetBankLedger", startDateParameter, endDateParameter, bankIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetBankLedgerForCompanyPosition_Result> GetBankLedgerForCompanyPosition(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string roleID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankLedgerForCompanyPosition_Result>("GetBankLedgerForCompanyPosition", startDateParameter, endDateParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetCashLedger_Result> GetCashLedger(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string roleID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCashLedger_Result>("GetCashLedger", startDateParameter, endDateParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetCompanyPositionReport_Result> GetCompanyPositionReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string roleId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyPositionReport_Result>("GetCompanyPositionReport", startDateParameter, endDateParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<GetDailCashReport_Result> GetDailCashReport(Nullable<System.DateTime> reportDate, string roleID)
        {
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailCashReport_Result>("GetDailCashReport", reportDateParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetDailCashReportForCompanyPosition_Result> GetDailCashReportForCompanyPosition(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string roleID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailCashReportForCompanyPosition_Result>("GetDailCashReportForCompanyPosition", startDateParameter, endDateParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetInventoryItemByID_Result> GetInventoryItemByID(Nullable<int> subItemID)
        {
            var subItemIDParameter = subItemID.HasValue ?
                new ObjectParameter("SubItemID", subItemID) :
                new ObjectParameter("SubItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryItemByID_Result>("GetInventoryItemByID", subItemIDParameter);
        }
    
        public virtual ObjectResult<GetInventoryItemOnHand_Result> GetInventoryItemOnHand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryItemOnHand_Result>("GetInventoryItemOnHand");
        }
    
        public virtual ObjectResult<GetInventoryItemOnHand_New_Result> GetInventoryItemOnHand_New(Nullable<int> itemId, Nullable<int> subItemId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var subItemIdParameter = subItemId.HasValue ?
                new ObjectParameter("SubItemId", subItemId) :
                new ObjectParameter("SubItemId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryItemOnHand_New_Result>("GetInventoryItemOnHand_New", itemIdParameter, subItemIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetMainProductsForDdl_Result> GetMainProductsForDdl()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMainProductsForDdl_Result>("GetMainProductsForDdl");
        }
    
        public virtual ObjectResult<GetPaymentsByPaymentHeaderId_Result> GetPaymentsByPaymentHeaderId(Nullable<int> paymentHeaderId)
        {
            var paymentHeaderIdParameter = paymentHeaderId.HasValue ?
                new ObjectParameter("PaymentHeaderId", paymentHeaderId) :
                new ObjectParameter("PaymentHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentsByPaymentHeaderId_Result>("GetPaymentsByPaymentHeaderId", paymentHeaderIdParameter);
        }
    
        public virtual ObjectResult<GetProductsForDdl_Result> GetProductsForDdl()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductsForDdl_Result>("GetProductsForDdl");
        }
    
        public virtual ObjectResult<GetProductsForDdlWithoutDetail_Result> GetProductsForDdlWithoutDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductsForDdlWithoutDetail_Result>("GetProductsForDdlWithoutDetail");
        }
    
        public virtual ObjectResult<GetProfitAndLossReport_Result> GetProfitAndLossReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string roleId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfitAndLossReport_Result>("GetProfitAndLossReport", startDateParameter, endDateParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<GetProfitAndLossReport_New_Result> GetProfitAndLossReport_New(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string roleId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfitAndLossReport_New_Result>("GetProfitAndLossReport_New", startDateParameter, endDateParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<GetPurhcaseOrderItemById_Result> GetPurhcaseOrderItemById(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurhcaseOrderItemById_Result>("GetPurhcaseOrderItemById", purchaseOrderIDParameter);
        }
    
        public virtual ObjectResult<GetPurhcaseOrderReturnItemById_Result> GetPurhcaseOrderReturnItemById(Nullable<int> purchaseOrderReturnID)
        {
            var purchaseOrderReturnIDParameter = purchaseOrderReturnID.HasValue ?
                new ObjectParameter("PurchaseOrderReturnID", purchaseOrderReturnID) :
                new ObjectParameter("PurchaseOrderReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPurhcaseOrderReturnItemById_Result>("GetPurhcaseOrderReturnItemById", purchaseOrderReturnIDParameter);
        }
    
        public virtual ObjectResult<GetSalesOrderItemById_Result> GetSalesOrderItemById(Nullable<int> saleOrderID)
        {
            var saleOrderIDParameter = saleOrderID.HasValue ?
                new ObjectParameter("SaleOrderID", saleOrderID) :
                new ObjectParameter("SaleOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrderItemById_Result>("GetSalesOrderItemById", saleOrderIDParameter);
        }
    
        public virtual ObjectResult<GetSalesOrderReturnItemById_Result> GetSalesOrderReturnItemById(Nullable<int> saleOrderReturnID)
        {
            var saleOrderReturnIDParameter = saleOrderReturnID.HasValue ?
                new ObjectParameter("SaleOrderReturnID", saleOrderReturnID) :
                new ObjectParameter("SaleOrderReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesOrderReturnItemById_Result>("GetSalesOrderReturnItemById", saleOrderReturnIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTotalRecovery(Nullable<bool> isSale, Nullable<int> vendorID, Nullable<int> customerID, Nullable<int> salesOfficerID, Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTotalRecovery", isSaleParameter, vendorIDParameter, customerIDParameter, salesOfficerIDParameter, cityIDParameter, cityAreaIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTotalRecoveryForSalesReport(Nullable<int> vendorID, Nullable<int> itemID, Nullable<int> salesOfficerID, Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTotalRecoveryForSalesReport", vendorIDParameter, itemIDParameter, salesOfficerIDParameter, cityIDParameter, cityAreaIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int InsertAndDeleteLedgerEntry(Nullable<int> accountCode, Nullable<System.DateTime> transDate, Nullable<decimal> dR, Nullable<decimal> cR, string createdBy, string remarks, Nullable<int> recordID, string recordType, ObjectParameter transactionID)
        {
            var accountCodeParameter = accountCode.HasValue ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var dRParameter = dR.HasValue ?
                new ObjectParameter("DR", dR) :
                new ObjectParameter("DR", typeof(decimal));
    
            var cRParameter = cR.HasValue ?
                new ObjectParameter("CR", cR) :
                new ObjectParameter("CR", typeof(decimal));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var recordTypeParameter = recordType != null ?
                new ObjectParameter("RecordType", recordType) :
                new ObjectParameter("RecordType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAndDeleteLedgerEntry", accountCodeParameter, transDateParameter, dRParameter, cRParameter, createdByParameter, remarksParameter, recordIDParameter, recordTypeParameter, transactionID);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertPayment(Nullable<int> accountId, string paymentMode, Nullable<int> orderNumber, Nullable<decimal> amount, string checkNumberOrOnlineReciptNumber, Nullable<System.DateTime> checkDate, Nullable<System.DateTime> transactionDate, string particulars, string voucherType, Nullable<int> bankId, string recordType, Nullable<int> recordId, string createdBy, string roleId, Nullable<int> paymentHeaderID)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var checkNumberOrOnlineReciptNumberParameter = checkNumberOrOnlineReciptNumber != null ?
                new ObjectParameter("CheckNumberOrOnlineReciptNumber", checkNumberOrOnlineReciptNumber) :
                new ObjectParameter("CheckNumberOrOnlineReciptNumber", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var particularsParameter = particulars != null ?
                new ObjectParameter("Particulars", particulars) :
                new ObjectParameter("Particulars", typeof(string));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var recordTypeParameter = recordType != null ?
                new ObjectParameter("RecordType", recordType) :
                new ObjectParameter("RecordType", typeof(string));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            var paymentHeaderIDParameter = paymentHeaderID.HasValue ?
                new ObjectParameter("PaymentHeaderID", paymentHeaderID) :
                new ObjectParameter("PaymentHeaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertPayment", accountIdParameter, paymentModeParameter, orderNumberParameter, amountParameter, checkNumberOrOnlineReciptNumberParameter, checkDateParameter, transactionDateParameter, particularsParameter, voucherTypeParameter, bankIdParameter, recordTypeParameter, recordIdParameter, createdByParameter, roleIdParameter, paymentHeaderIDParameter);
        }
    
        public virtual int InsertProfitAndLoss(Nullable<int> transID, Nullable<decimal> amount, Nullable<int> recordID, string recordType)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("RecordID", recordID) :
                new ObjectParameter("RecordID", typeof(int));
    
            var recordTypeParameter = recordType != null ?
                new ObjectParameter("RecordType", recordType) :
                new ObjectParameter("RecordType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProfitAndLoss", transIDParameter, amountParameter, recordIDParameter, recordTypeParameter);
        }
    
        public virtual int ResetDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetDatabase");
        }
    
        public virtual int sp_GetPaymentPendingReport(Nullable<int> customerID, Nullable<int> supplierID, Nullable<int> bookerID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> noOfDays)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var bookerIDParameter = bookerID.HasValue ?
                new ObjectParameter("BookerID", bookerID) :
                new ObjectParameter("BookerID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var noOfDaysParameter = noOfDays.HasValue ?
                new ObjectParameter("NoOfDays", noOfDays) :
                new ObjectParameter("NoOfDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPaymentPendingReport", customerIDParameter, supplierIDParameter, bookerIDParameter, startDateParameter, endDateParameter, noOfDaysParameter);
        }
    
        public virtual ObjectResult<sp_ProfitAndLostSummary_Result> sp_ProfitAndLostSummary(Nullable<int> sONumber, Nullable<int> vendorID, Nullable<int> itemID, Nullable<int> salesOfficerID, Nullable<int> bookerID, Nullable<int> cityID, Nullable<int> cityAreaID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var sONumberParameter = sONumber.HasValue ?
                new ObjectParameter("SONumber", sONumber) :
                new ObjectParameter("SONumber", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var salesOfficerIDParameter = salesOfficerID.HasValue ?
                new ObjectParameter("SalesOfficerID", salesOfficerID) :
                new ObjectParameter("SalesOfficerID", typeof(int));
    
            var bookerIDParameter = bookerID.HasValue ?
                new ObjectParameter("BookerID", bookerID) :
                new ObjectParameter("BookerID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityAreaIDParameter = cityAreaID.HasValue ?
                new ObjectParameter("CityAreaID", cityAreaID) :
                new ObjectParameter("CityAreaID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProfitAndLostSummary_Result>("sp_ProfitAndLostSummary", sONumberParameter, vendorIDParameter, itemIDParameter, salesOfficerIDParameter, bookerIDParameter, cityIDParameter, cityAreaIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdatePayment(Nullable<int> paymentId, Nullable<int> accountId, string paymentMode, Nullable<int> orderNumber, Nullable<decimal> amount, string checkNumberOrOnlineReciptNumber, Nullable<System.DateTime> checkDate, Nullable<System.DateTime> transactionDate, string particulars, string voucherType, Nullable<int> bankId, string recordType, Nullable<int> recordId, string createdBy, string roleId)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var checkNumberOrOnlineReciptNumberParameter = checkNumberOrOnlineReciptNumber != null ?
                new ObjectParameter("CheckNumberOrOnlineReciptNumber", checkNumberOrOnlineReciptNumber) :
                new ObjectParameter("CheckNumberOrOnlineReciptNumber", typeof(string));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var particularsParameter = particulars != null ?
                new ObjectParameter("Particulars", particulars) :
                new ObjectParameter("Particulars", typeof(string));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(int));
    
            var recordTypeParameter = recordType != null ?
                new ObjectParameter("RecordType", recordType) :
                new ObjectParameter("RecordType", typeof(string));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdatePayment", paymentIdParameter, accountIdParameter, paymentModeParameter, orderNumberParameter, amountParameter, checkNumberOrOnlineReciptNumberParameter, checkDateParameter, transactionDateParameter, particularsParameter, voucherTypeParameter, bankIdParameter, recordTypeParameter, recordIdParameter, createdByParameter, roleIdParameter);
        }
    }
}
