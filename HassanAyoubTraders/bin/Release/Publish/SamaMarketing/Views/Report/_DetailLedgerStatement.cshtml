@model SamaaMarketing.Models.ViewModels.LedgerViewModel
@using System.Globalization;

@{
    CultureInfo ciPk = new CultureInfo("ur-PK");
    int srNo = 0;
}

@Html.HiddenFor(model => model.ReportName)
<div id="dvTableHeader" class="dvTableHeader" style="text-align:center; display:none;">
    <span>
        <strong>@Model.ReportName</strong>
    </span>
    <hr />
</div>

<table class="table table-striped table-bordered datatablethis" id="tbl">
    <thead>
        <tr>
            <th style="width: 5%; text-align:center;">Sr #</th>
            <th style="width: 7%; text-align:center;">Date</th>
            <th style="text-align:center;">Perticular</th>
            <th style="width: 8%; text-align:center;">In Qty</th>
            <th style="width: 8%; text-align:center;">Out Qty</th>
            <th style="width: 10%; text-align:center;">Rate</th>
            <th style="width: 10%; text-align:center;">Dr</th>
            <th style="width: 10%; text-align:center;">Cr</th>
            <th style="width: 10%; text-align:center;">Balance</th>
        </tr>
    </thead>
    <tbody>
        @{
            int index = 0;

            foreach (var item in Model.DetailLedgerStatement)
            {
                if (index == 0)
                {
                    <tr>
                        <td style="text-align:center;">@(++srNo)</td>
                        <td style="text-align:center;">@item.TransDate</td>
                        <td>
                            @item.Descriptions
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td style="text-align:right;">
                            @{
                                decimal parsedItemPrice = decimal.Parse(item.Balance.ToString(), CultureInfo.InvariantCulture);
                                string Balance = string.Format(ciPk, "{0:c}", parsedItemPrice);
                            }
                            @Balance
                            <strong>@item.ValueType</strong>
                        </td>
                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td style="text-align:center;">@(++srNo)</td>
                                        <td style="text-align:center;">@item.TransDate</td>
                                        <td>
                                        @item.Remarks
                                        <br />
                                        @item.Descriptions</td>
                                        <td style="text-align:center;">@item.InQty</td>
                                        <td style="text-align:center;">@item.OutQty</td>
                                        <td style="text-align:right;">
                                            @{
                                                decimal parsedRate = decimal.Parse(item.Rate.ToString(), CultureInfo.InvariantCulture);
                                                string rate = string.Format(ciPk, "{0:c}", parsedRate);
                                            }
                                            @rate
                                        </td>
                                        <td style="text-align:right;">
                                            @{
                                                decimal parsedDr = decimal.Parse(item.Dr.ToString(), CultureInfo.InvariantCulture);
                                                string dr = string.Format(ciPk, "{0:c}", parsedDr);
                                            }
                                            @dr
                                        </td>
                                        <td style="text-align:right;">
                                            @{
                                                decimal parsedCr = decimal.Parse(item.Cr.ToString(), CultureInfo.InvariantCulture);
                                                string cr = string.Format(ciPk, "{0:c}", parsedCr);
                                            }
                                            @cr
                                        </td>
                                        <td style="text-align:right;">
                                            @{
                                                decimal parsedItemPrice = decimal.Parse(item.Balance.ToString(), CultureInfo.InvariantCulture);
                                                string Balance = string.Format(ciPk, "{0:c}", parsedItemPrice);
                                            }
                                            @Balance
                                            <strong>@item.ValueType</strong>
                                        </td>
                                    </tr>
                                                    }
                                                    index = index + 1;
                                                }
        }

    </tbody>
    <tfoot>
        <tr>
            <th></th>
            <th></th>
            <th style="text-align:center;">Total</th>
            <th style="text-align:center;">@Model.DetailLedgerStatement.Sum(x => x.InQty)</th>
            <th style="text-align:center;">@Model.DetailLedgerStatement.Sum(x => x.OutQty)</th>
            <th>.</th>
            <th style="text-align:right;">
                @{
                    decimal parsedFTDR = decimal.Parse(Model.DetailLedgerStatement.Sum(x => x.Dr).ToString(), CultureInfo.InvariantCulture);
                    string FTDR = string.Format(ciPk, "{0:c}", parsedFTDR);
                }
                @FTDR
            </th>
            <th style="text-align:right;">
                @{
                    decimal parsedFTCR = decimal.Parse(Model.DetailLedgerStatement.Sum(x => x.Cr).ToString(), CultureInfo.InvariantCulture);
                    string FTCR = string.Format(ciPk, "{0:c}", parsedFTCR);
                }
                @FTCR
            </th>
            <th style="text-align:right;">
                @{
                    decimal parsedFTBal = decimal.Parse(Model.DetailLedgerStatement[Model.DetailLedgerStatement.Count - 1].Balance.ToString(), CultureInfo.InvariantCulture);
                    string FTBal = string.Format(ciPk, "{0:c}", parsedFTBal);
                }
                @FTBal
            </th>
        </tr>
    </tfoot>
</table>

@*<br />
    <hr />
    <br />

    <table class="table table-striped table-bordered " id="tbl">
        <thead>
            <tr>
                <th style="text-align:center;">Total <br /> IN QTY</th>
                <th style="text-align:center;">Total <br /> OUT QTY</th>
                <th style="text-align:center;">Total <br /> DEBIT</th>
                <th style="text-align:center;">Total <br /> CREDIT</th>
                <th style="text-align:center;">CLOSING <br /> BALANCE</th>
            </tr>
            <tr>
                <td style="text-align:center;">@Model.DetailLedgerStatement.Sum(x => x.InQty)</td>
                <td style="text-align:center;">@Model.DetailLedgerStatement.Sum(x => x.OutQty)</td>
                <td style="text-align:center;">
                    @{
                        decimal parsedtdr = decimal.Parse(Model.DetailLedgerStatement.Sum(x => x.Dr).ToString(), CultureInfo.InvariantCulture);
                        string tdr = string.Format(ciPk, "{0:c}", parsedtdr);
                    }
                    @tdr
                </td>
                <td style="text-align:center;">
                    @{
                        decimal parsedtcr = decimal.Parse(Model.DetailLedgerStatement.Sum(x => x.Cr).ToString(), CultureInfo.InvariantCulture);
                        string tcr = string.Format(ciPk, "{0:c}", parsedtcr);
                    }
                    @tcr
                </td>
                <td style="text-align:center;">
                    @{
                        decimal parsedBal = decimal.Parse(Model.DetailLedgerStatement[srNo - 1].Balance.ToString(), CultureInfo.InvariantCulture);
                        string bal = string.Format(ciPk, "{0:c}", parsedBal);
                    }
                    @bal
                </td>
            </tr>
        </thead>
    </table>*@

<script>
    $(document).ready(function () {
        $('.datatablethis').DataTable();

        //$(window).blur(function () {
        //    $('.dvTableHeader').hide();
        //});

        //$('.datatablethis').DataTable({
        //    dom: 'Bfrtip',
        //    buttons: [
        //        //{ extend: 'copy', text: 'Copy', message: function () { return 'Samaa Marketing \r\n Account Payable Report' } },
        //        //{ extend: 'csv', text: 'CSV', message: function () { return 'Samaa Marketing \r\n Account Payable Report' } },
        //        //{ extend: 'excel', text: 'Excel', title: function () { return 'Samaa Marketing \r\n Account Payable Report' } },
        //        {
        //            extend: 'pdfHtml5',
        //            text: 'PDF',
        //            title: function () { return 'Samaa Marketing \r\n ' + $('#ReportName').val(); },
        //            footer: true,
        //            exportOptions: {
        //                columns: ':visible'
        //            },
        //            customize: function (doc) {
        //                doc.content.forEach(function (item) {
        //                    if (item.table) {
        //                        item.table.widths = [20, 40, '*', 20, 20, 40, 40, 40, 60]
        //                    }
        //                });
        //                doc.defaultStyle.fontSize = 6;
        //                doc.styles.tableHeader.fontSize = 6;
        //                doc.styles.tableFooter.fontSize = 6;

        //            }
        //        },
        //        {
        //            extend: 'print', text: 'Print',
        //            message: function () { $('.dvTableHeader').show(); return $('.dvTableHeader').html(); },
        //            footer: true,
        //            customize: function (win) {
        //                $(win.document.body)
        //                    .css('font-size', '8pt')

        //                $(win.document.body).find('table')
        //                    .addClass('compact')
        //                    .css('font-size', '8px');
        //            }
        //        }
        //    ]
        //});

    });
</script>