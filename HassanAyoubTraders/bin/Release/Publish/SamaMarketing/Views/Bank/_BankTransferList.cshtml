@model  List<SamaaMarketing.Models.EF.BrowseBankTransfers_Result>

@using System.Globalization;
@{
    CultureInfo ciPk = new CultureInfo("ur-PK");
}

<div id="dvTableHeader" class="dvTableHeader" style="text-align:center; display:none;">
    <span>
        <strong>Bank To Bank Transfer</strong>
    </span>
    <hr />
</div>


<div class="row clearfix">
    <div class="col-md-12">
        <div>
            <table class="table table-striped table-bordered datatable" id="tblList">
                <thead>
                    <tr>
                        <th style="width:10%;">From Bank</th>
                        <th style="width:10%;">To Bank</th>
                        <th style="width:10%;">Transfer Date</th>
                        <th style="">Description</th>
                        <th style="width:10%;">Service Charges</th>
                        <th style="width:10%;">Amount</th>
                        <th style="width:10%;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @item.FromBank
                                </td>
                                <td>
                                    @item.ToBank
                                </td>
                                <td>@(item.TransferDate.HasValue == false ? "" : @item.TransferDate.Value.ToString("dd/MM/yyyy"))</td>
                                <td>
                                    @item.Description
                                </td>
                                <td>
                                    @{
                                        decimal parsedItemSC = decimal.Parse(item.ServiceCharges.ToString(), CultureInfo.InvariantCulture);
                                        string SC = string.Format(ciPk, "{0:c}", parsedItemSC);
                                    }
                                    @SC
                                </td>
                                <td>
                                    @{
                                        decimal parsedItemAmount = decimal.Parse(item.Amount.ToString(), CultureInfo.InvariantCulture);
                                        string amount = string.Format(ciPk, "{0:c}", parsedItemAmount);
                                    }
                                    @amount
                                </td>
                                <td>
                                    <div class="dt-buttons">
                                        <a href="#" data-id="@item.ID" class="btn btn-xs edit" title="Edit"><i class="fa fa-pencil-square-o"></i></a>
                                        |
                                        <a href="#" data-id="@item.ID" class="btn btn-xs delete" title="Remove"><i class="fa fa-trash"></i></a>
                                    </div>
                                </td>
                            </tr>
                                            }
                                        }

                </tbody>
            </table>

        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        $(window).blur(function () {
            $('.dvTableHeader').hide();
        });

        $('.datatable').DataTable({
            dom: 'Bfrtip',
            buttons: [
                //{ extend: 'copy', text: 'Copy', message: function () { return 'Samaa Marketing \r\n Account Payable Report' } },
                //{ extend: 'csv', text: 'CSV', message: function () { return 'Samaa Marketing \r\n Account Payable Report' } },
                //{ extend: 'excel', text: 'Excel', title: function () { return 'Samaa Marketing \r\n Account Payable Report' } },
                {
                    extend: 'pdfHtml5',
                    text: 'PDF',
                    title: function () { return 'Samaa Marketing \r\n Bank To Bank Transfer' },
                    footer: true,
                    exportOptions: {
                        columns: ':visible'
                    },
                    customize: function (doc) {
                        doc.content.forEach(function (item) {
                            if (item.table) {
                                item.table.widths = ['*', '*', 40, '*', 40, 40, 40]
                            }
                        });
                        doc.defaultStyle.fontSize = 6;
                        doc.styles.tableHeader.fontSize = 6;
                        doc.styles.tableFooter.fontSize = 6;
                    }
                },
                {
                    extend: 'print', text: 'Print',
                    message: function () { $('.dvTableHeader').show(); return $('.dvTableHeader').html(); },
                    footer: true,
                    customize: function (win) {
                        $(win.document.body)
                            .css('font-size', '10pt')

                        $(win.document.body).find('table')
                            .addClass('compact')
                            .css('font-size', '10px');
                    }
                }
            ]
        });

        $('.datatable').on('click', '.delete', function () {
            var id = $(this).attr("data-id");
            RemoveRow(id);

        });

        $('.datatable').on('click', '.edit', function () {
            var id = $(this).attr("data-id");
            $('.page-loader-wrapper').show();
            var url = getWebsiteUrl + "/Bank/BankTransfer/" + id;
            window.location.href = url;
        });

    });
</script>
